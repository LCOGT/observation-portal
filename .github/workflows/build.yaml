name: Build

on:
  # Run this workflow on all branches
  push:
    branches:
      - '**'
  # Run this workflow on pull requests
  pull_request:
  # Run this workflow when any tag is created
  create:
    tags:
      - '**'

jobs:

  run_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U coverage coveralls 'numpy>=1.16,<1.17'
        pip install -r requirements.txt
    - name: Run tests
      run: |
        coverage run manage.py test --settings=test_settings
      env:
        DB_USER: postgres
        DB_PASS: postgres
        DB_HOST: localhost
        DB_PORT: 5432
    - name: Coveralls report
      run: |
        coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_publish_image:
    # Only run this job if the run_tests job has succeeded, and if
    # this workflow was triggered by the creation of a new tag
    needs: run_tests
    if: github.event_name == 'create' && github.event.ref_type == 'tag'
    runs-on: ubuntu-latest
    env:
      DOCKER_REPOSITORY: observatorycontrolsystem/observation-portal
      DOCKER_IMAGE_TAG: ${{ github.event.ref }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKER_REPOSITORY }}
          tag_with_ref: true
